`[Solution:`[Assembly:`@File:`{`Solution.Name`\`Assembly.Namespace`\`Assembly.Subfolder`\`Assembly.Name`.cs`]`]`@MapClear:`]`[Class:`@MapSet:`{`Class.Name`Inheritance`]`{ : GenNamedApplicationBase`]`]`@MapSet:`{`Class.Name`InheritanceRoot`]`{``Class.Name`]`]`]`[Class:`@MapSet:`{ClassName`]`{`Class.Name``]`]`[SubClass:`@MapSet:`{SubClassName`]`{`SubClass.Name``]`]`%Class.Name=SubClass.Name:`?Class.Inheritance=Virtual:`@MapSet:`{`@MapGet:`{SubClassName`]`]Inheritance`]`{ : `@MapGet:'ClassName'`]`]`]`]`@MapSet:`{`@MapGet:`{SubClassName`]`]InheritanceRoot`]`{`@MapGet:'ClassName'`]`]`]`]`]`]// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
//  file, You can obtain one at http://mozilla.org/MPL/2.0/.

namespace `Assembly.Namespace`.`Assembly.Subfolder`
{
    /// <summary>
    /// `Assembly.Title`
    /// </summary>
    public class `Assembly.Name` : GenApplicationBase
    {
        public `Assembly.Name`(): this(new GenData(GetDefinition()))
        {
        }

        public `Assembly.Name`(GenData genData)
        {
            GenData = genData;
            base.GenObject = genData.Root;
        }

        public static GenDataDef GetDefinition()
        {
            var f = new GenDataDef();
            f.Definition = "`Assembly.Name`";
`[Class':            f.AddSubClass("", "`Class.Name`");
`]`[Class:`[SubClass:            f.AddSubClass("`Class.Name`", "`SubClass.Name`");
`]`]`@Set:`{ClassId`]0`]`[Class:`@Add:`{ClassId`]`]`[Property:            f.Classes[`@Get:`{ClassId`]`]].InstanceProperties.Add("`Property.Name`");
`]`]            return f;
        }
`[Class':
        public GenNamedApplicationList<`Class.Name`> `Class.Name`List { get; private set; }
`]`[Class':
        protected override void GenObjectSetNotification()
        {
            `Class.Name`List = new GenNamedApplicationList<`Class.Name`>(this);
        }

        public `Class.Name` Add`Class.Name`(`[Property/:`{string `?Property.Name='Default':@`]`?Property.Name='Class':@`]`@Decapitalize:`{`Property.Name``]`]`?Property.Name<>'Name': = "`Property.Default`"`]`], `])
        {
            var item = new `Class.Name`(GenData)
                           {
                               GenObject = GenData.CreateObject("", "`Class.Name`")`[Property:,
                               `Property.Name` = `?Property.Name='Default':@`]`?Property.Name='Class':@`]`@Decapitalize:`{`Property.Name``]`]`]
                           };
            `Class.Name`List.Add(item);
            return item;
        }
    }
`]}
`[Class:`@MapSet:`{ClassName`]`{`Class.Name``]`]`@File:`{`Solution.Name`\`Assembly.Namespace`\`Assembly.Subfolder`\`Class.Name`.cs`]`]// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
//  file, You can obtain one at http://mozilla.org/MPL/2.0/.

namespace `Assembly.Namespace`.`Assembly.Subfolder`
{
    /// <summary>
    /// `Class.Title`
    /// </summary>
    public class `Class.Name``@MapGet:`{`Class.Name`Inheritance`]`]
    {
        public `Class.Name`()
        {
        }

        public `Class.Name`(GenData genData)
        {
            GenData = genData;`[Property:
            Properties.Add("`Property.Name`");`]
        }

`[Property:`?Class.Inheritance~:        /// <summary>
        /// `Property.Title`
        /// </summary>
        public`?Property.Name='Name': override`] string `Property.Name`
        {
            get { return AsString("`Property.Name`"); }
            set
            {
                if (`Property.Name` == value) return;
                SetString("`Property.Name`", value);
                if (!DelayedSave) SaveFields();
            }
        }

`]`?Class.Inheritance=Virtual:        /// <summary>
        /// `Property.Title`
        /// </summary>
        public`?Property.Name='Name': override`] string `Property.Name`
        {
            get { return AsString("`Property.Name`"); }
            set
            {
                if (`Property.Name` == value) return;
                SetString("`Property.Name`", value);
                if (!DelayedSave) SaveFields();
            }
        }

`]`?Class.Inheritance=Abstract:`?Property.Name<>'Name':        /// <summary>
        /// `Property.Title`
        /// </summary>
        public`?Property.Name='Name': override`] string `Property.Name`
        {
            get { return AsString("`Property.Name`"); }
            set
            {
                if (`Property.Name` == value) return;
                SetString("`Property.Name`", value);
                if (!DelayedSave) SaveFields();
            }
        }

`]`]`]`[SubClass:`%Class.Name=SubClass.Name:`?Class.Inheritance<>Virtual:        public GenNamedApplicationList<`Class.Name`> `Class.Name`List { get; private set; }
`]`]`]`[SubClass':
        protected override void GenObjectSetNotification()
        {
`]`[SubClass:`%Class.Name=SubClass.Name:`?Class.Inheritance<>Virtual:            base.GenObjectSetNotification();
            `Class.Name`List = new GenNamedApplicationList<`Class.Name`>(this);
`]`]`]`[SubClass':        }`]`[SubClass:`@MapSet:`{SubClassName`]`{`SubClass.Name``]`]`%Class.Name=SubClass.Name:`?Class.Inheritance~:

        public `Class.Name` Add`Class.Name`(`[Property/:`{string `?Property.Name='Default':@`]`?Property.Name='Class':@`]`@Decapitalize:`{`Property.Name``]`]`?Property.Name<>'Name': = "`Property.Default`"`]`], `])
        {
            var item = new `Class.Name`(GenData)
                           {
                               GenObject = GenData.CreateObject("`@MapGet:'ClassName'`]", "`Class.Name`")`[Property:,
                               `Property.Name` = `?Property.Name='Default':@`]`?Property.Name='Class':@`]`@Decapitalize:`{`Property.Name``]`]`]
                           };
            `Class.Name`List.Add(item);
            return item;
        }
`]`?Class.Inheritance=Abstract:`[Subclass:`%Class.Name=SubClass.Name:`?Class.Inheritance=Virtual:
        public `Class.Name` Add`Class.Name`(`[Property/:`{string `?Property.Name='Default':@`]`?Property.Name='Class':@`]`@Decapitalize:`{`Property.Name``]`]`?Property.Name<>'Name': = "`Property.Default`"`]`], `])
        {
            var item = new `Class.Name`(GenData)
                           {
                               GenObject = GenData.CreateObject("`@MapGet:'ClassName'`]", "`@MapGet:`{`Class.Name`InheritanceRoot`]`]")`[Property:,
                               `Property.Name` = `?Property.Name='Default':@`]`?Property.Name='Class':@`]`@Decapitalize:`{`Property.Name``]`]`]
                           };
            `@MapGet:`{SubClassName`]`]List.Add(item);
            return item;
        }`]`]`]`]`]`]
    }
}
`]`]`]